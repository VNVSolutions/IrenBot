import logging
import telebot
import string
import os
from telebot.types import ReplyKeyboardMarkup, KeyboardButton
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from telebot.types import InputMediaPhoto
from telebot import types
from django.utils import timezone
from django.http import HttpResponse
from django.views.decorators.csrf import csrf_exempt
from django.conf import settings
from django.core.files.storage import FileSystemStorage
from django.core.files import File
from django.dispatch import receiver
from django.db.models import Q
from django.db.models.signals import post_save
from datetime import datetime
from itertools import zip_longest
from .tasks import process_telegram_update
from .conf import bot
from .models import UserProfile
from .models import Categories
from .models import Products
from .models import ProductVariations
from .models import ImageForMain
from .models import BackendHall
from .models import OrderBackendHall
from .models import Basket
from .models import AboutUs
from .models import Contacts


logger = logging.getLogger(__name__)

user_context = {}


@csrf_exempt
def telegram_webhook(request):
    if request.method == 'POST':
        try:
            update_data = request.body.decode('utf-8')
            process_telegram_update.delay(update_data)
            logger.info(f"–û—Ç—Ä–∏–º–∞–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∑ webhook: {update_data}")
            return HttpResponse('')
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –≤–µ–±—Ö—É–∫—É: {str(e)}")


@bot.message_handler(commands=['start'])
def start(message):
    chat_id = message.chat.id
    first_name = message.chat.first_name
    username = message.chat.username
    try:
        user, created = UserProfile.objects.get_or_create(telegram_id=chat_id, defaults={'username': first_name, 'name': username})
        clear_user_context(chat_id)
        bot.send_message(chat_id, "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é üëá", reply_markup=create_reply_markup())
    except Exception as e:
        bot.send_message(chat_id, f"–ü–æ–º–∏–ª–∫–∞: {str(e)}")


def clear_user_context(chat_id):
    if chat_id in user_context:
        del user_context[chat_id]


def create_reply_markup():
    markup = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    markup.add(KeyboardButton('–ó–∞—Ä–µ–∑–µ—Ä–≤—É–≤–∞—Ç–∏ –∑–∞–ª'), KeyboardButton('–ó–∞–º–æ–≤–∏—Ç–∏ —ó–∂—É'))
    markup.add(KeyboardButton('–ö–æ—Ä–∑–∏–Ω–∞'), KeyboardButton('–ü—Ä–æ –Ω–∞—Å'))
    markup.add(KeyboardButton('–ö–æ–Ω—Ç–∞–∫—Ç–∏'))
    return markup


@bot.message_handler(func=lambda message: message.text == '–ù–∞–∑–∞–¥ ‚¨Ö')
def go_back(message):
    chat_id = message.chat.id
    clear_user_context(chat_id)
    bot.send_message(chat_id, "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é üëá", reply_markup=create_reply_markup())


@bot.message_handler(func=lambda message: message.text == '–ó–∞—Ä–µ–∑–µ—Ä–≤—É–≤–∞—Ç–∏ –∑–∞–ª')
def reserve_hall(message):
    chat_id = message.chat.id
    halls = BackendHall.objects.all()

    if halls.exists():
        markup = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)

        for hall in halls:
            markup.add(KeyboardButton(hall.name))

        markup.add(KeyboardButton('–ù–∞–∑–∞–¥ ‚¨Ö'))
        bot.send_message(chat_id, "–û–±–µ—Ä—ñ—Ç—å –∑–∞–ª –¥–ª—è —Ä–µ–∑–µ—Ä–≤–∞—Ü—ñ—ó üèØ", reply_markup=markup)
    else:
        bot.send_message(chat_id, "–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∑–∞–ª—ñ–≤ –¥–ª—è —Ä–µ–∑–µ—Ä–≤–∞—Ü—ñ—ó.")


@bot.message_handler(func=lambda message: message.text in [hall.name for hall in BackendHall.objects.all()])
def show_hall_details(message):
    chat_id = message.chat.id
    selected_hall_name = message.text

    try:
        hall = BackendHall.objects.get(name=selected_hall_name)

        if chat_id in user_context:
            user_context[chat_id]['hall'] = hall.name
            user_context[chat_id]['step'] = 'reserve_hall'
        else:
            user_context[chat_id] = {'hall': hall.name, 'step': 'reserve_hall'}

        markup = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        markup.add(KeyboardButton('–ó–∞—Ä–µ–∑–µ—Ä–≤—É–≤–∞—Ç–∏'))
        markup.add(KeyboardButton('–ù–∞–∑–∞–¥ ‚¨Ö'))

        caption = f"–ó–∞–ª: {hall.name}\n–†–æ–∑–º—ñ—Ä: {hall.size}"

        if hall.img:
            with open(hall.img.path, 'rb') as image:
                bot.send_photo(chat_id, image, caption=caption, reply_markup=markup)
        else:
            bot.send_message(chat_id, f"{caption}\n–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–∞–ª—É –≤—ñ–¥—Å—É—Ç–Ω—î.", reply_markup=markup)

    except BackendHall.DoesNotExist:
        bot.send_message(chat_id, "–ó–∞–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π.")


@bot.message_handler(func=lambda message: message.text == '–ó–∞—Ä–µ–∑–µ—Ä–≤—É–≤–∞—Ç–∏')
def ask_for_contact_details(message):
    chat_id = message.chat.id

    markup = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    markup.add(KeyboardButton('–ü–æ–¥—ñ–ª–∏—Ç–∏—Å—å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º', request_contact=True))
    markup.add(KeyboardButton('–í–≤–µ—Å—Ç–∏ —Å–∞–º–æ—Å—Ç—ñ–π–Ω–æ –∫–æ–Ω—Ç–∞–∫—Ç'))

    user_context[chat_id]['step'] = 'reserve_hall'

    bot.send_message(chat_id, "–í–∫–∞–∂—ñ—Ç—å —Å–≤–æ—ó –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ñ –¥–∞–Ω—ñ üì±", reply_markup=markup)


@bot.message_handler(func=lambda message: message.text == '–í–≤–µ—Å—Ç–∏ —Å–∞–º–æ—Å—Ç—ñ–π–Ω–æ –∫–æ–Ω—Ç–∞–∫—Ç')
def request_manual_contact(message):
    chat_id = message.chat.id
    bot.send_message(chat_id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —Å–≤—ñ–π –∫–æ–Ω—Ç–∞–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä:")

    if chat_id in user_context and user_context[chat_id].get('step') == 'order_food':
        bot.register_next_step_handler(message, save_manual_contact_order_food)
    elif chat_id in user_context and user_context[chat_id].get('step') == 'reserve_hall':
        bot.register_next_step_handler(message, save_manual_contact_reserve_hall)

def save_manual_contact_order_food(message):
    chat_id = message.chat.id
    contact = message.text

    user_context[chat_id]['contact'] = contact

    process_order(chat_id)

def save_manual_contact_reserve_hall(message):
    chat_id = message.chat.id
    contact = message.text

    try:
        user = UserProfile.objects.get(telegram_id=chat_id)

        if "step" in user_context.get(chat_id, {}) and user_context[chat_id]["step"] == "reserve_hall":
            selected_hall_name = user_context[chat_id]['hall']
            hall = BackendHall.objects.get(name=selected_hall_name)

            OrderBackendHall.objects.create(user=user, hall=hall, contact=contact)

            send_order(chat_id, selected_hall_name, contact)

        else:
            bot.send_message(chat_id, "–ü–æ–º–∏–ª–∫–∞: –≤–∏ –Ω–µ –≤–∏–±—Ä–∞–ª–∏ –∑–∞–ª –¥–ª—è —Ä–µ–∑–µ—Ä–≤–∞—Ü—ñ—ó.")

    except UserProfile.DoesNotExist:
        bot.send_message(chat_id, "–ü–æ–º–∏–ª–∫–∞: –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π.")
    except BackendHall.DoesNotExist:
        bot.send_message(chat_id, "–ü–æ–º–∏–ª–∫–∞: –∑–∞–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π.")
    except Exception as e:
        bot.send_message(chat_id, f"–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: {str(e)}")


def send_order(chat_id, hall_name, contact_info):
    try:
        user = UserProfile.objects.get(telegram_id=chat_id)
        hall = BackendHall.objects.get(name=hall_name)

        caption = f"‚ùó –ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚ùó\n"
        caption += f"üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {user.username}\nü§ñ ID: {user.telegram_id}\n"
        caption += f"üèõ –ó–∞–ª: {hall.name}\n"
        caption += f"üì± –ö–æ–Ω—Ç–∞–∫—Ç: {contact_info}\n"

        channel_id = -1002297718612
        bot.send_message(channel_id, caption)

        bot.send_message(chat_id, '–î—è–∫—É—é, –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º –º–∏ –∑–≤\'—è–∂–µ–º–æ—Å—å –∑ –í–∞–º–∏!')
        clear_user_context(chat_id)
        bot.send_message(chat_id, "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é üëá", reply_markup=create_reply_markup())
    except Exception as e:
        bot.send_message(chat_id, f"–ü—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –≤–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑: {str(e)}")


@bot.message_handler(func=lambda message: message.text == '–ó–∞–º–æ–≤–∏—Ç–∏ —ó–∂—É')
def show_categories(message):
    chat_id = message.chat.id
    categories = Categories.objects.filter(is_active=True)

    if categories.exists():
        markup = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)

        markup.add(KeyboardButton('üìñ –í—ñ–¥–∫—Ä–∏—Ç–∏ –º–µ–Ω—é üìñ'))

        category_buttons = [KeyboardButton(f"{category.smile} {category.categories_name}") for category in categories]
        markup.add(*category_buttons)

        bot.send_message(chat_id, "–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é üçΩ", reply_markup=markup)
    else:
        bot.send_message(chat_id, "–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä—ñ–π.")


@bot.message_handler(func=lambda message: any(message.text.endswith(category.categories_name) for category in Categories.objects.filter(is_active=True)))
def show_products_details(message):
    chat_id = message.chat.id
    selected_category_name = message.text.split(' ', 1)[-1]

    try:
        category = Categories.objects.get(categories_name=selected_category_name)
        products = Products.objects.filter(categories=category)

        if products.exists():
            markup = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)

            markup.add(KeyboardButton('üìñ –í—ñ–¥–∫—Ä–∏—Ç–∏ –º–µ–Ω—é üìñ'))

            product_buttons = [KeyboardButton(f"{product.smile} {product.name}") for product in products]
            markup.add(*product_buttons)

            bot.send_message(chat_id, "–û–±–µ—Ä—ñ—Ç—å –ø—Ä–æ–¥—É–∫—Ç üçÆ", reply_markup=markup)
        else:
            bot.send_message(chat_id, "–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –ø—Ä–æ–¥—É–∫—Ç—ñ–≤ —É —Ü—ñ–π –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó.", reply_markup=create_reply_markup())

    except Categories.DoesNotExist:
        bot.send_message(chat_id, "–ö–∞—Ç–µ–≥–æ—Ä—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞.")


@bot.message_handler(func=lambda message: any(message.text.endswith(product.name) for product in Products.objects.all()))
def show_product_details(message):
    chat_id = message.chat.id
    selected_product_name = message.text.split(' ', 1)[-1]

    try:
        product = Products.objects.get(name=selected_product_name)

        if chat_id in user_context:
            user_context[chat_id]['product'] = product.name
            user_context[chat_id]['step'] = 'order_product'
            user_context[chat_id]['product_id'] = product.id
        else:
            user_context[chat_id] = {'product': product.name, 'step': 'order_product', 'product_id': product.id}

        markup = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        markup.add(KeyboardButton('–î–æ–¥–∞—Ç–∏ —É –∫–æ—Ä–∑–∏–Ω—É üõí'))
        markup.add(KeyboardButton('–ù–∞–∑–∞–¥ ‚¨Ö'))

        caption = f"üçΩ –ü—Ä–æ–¥—É–∫—Ç: {product.name}\nüíµ –¶—ñ–Ω–∞: {product.price} –≥—Ä–Ω\nüìù –Ü–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç–∏: {product.ingredients or '–ù–µ–º–∞—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó'}"

        if product.image_products:
            with open(product.image_products.path, 'rb') as image:
                bot.send_photo(chat_id, image, caption=caption, reply_markup=markup)
        else:
            bot.send_message(chat_id, f"{caption}\n–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø—Ä–æ–¥—É–∫—Ç—É –≤—ñ–¥—Å—É—Ç–Ω—î.", reply_markup=markup)

    except Products.DoesNotExist:
        bot.send_message(chat_id, "–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π.")



@bot.message_handler(func=lambda message: message.text == '–î–æ–¥–∞—Ç–∏ —É –∫–æ—Ä–∑–∏–Ω—É üõí')
def ask_for_quantity(message):
    chat_id = message.chat.id

    if chat_id in user_context and user_context[chat_id].get('step') == 'order_product':
        bot.send_message(chat_id, "–í–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—É:")
        bot.register_next_step_handler(message, save_to_basket)
    else:
        bot.send_message(chat_id, "–ü–æ–º–∏–ª–∫–∞: —Ç–æ–≤–∞—Ä –Ω–µ –≤–∏–±—Ä–∞–Ω–∏–π.")


def save_to_basket(message):
    chat_id = message.chat.id
    amount = message.text

    try:
        user = UserProfile.objects.get(telegram_id=chat_id)

        if 'product_id' in user_context[chat_id]:
            product = Products.objects.get(id=user_context[chat_id]['product_id'])

            Basket.objects.create(user=user, products=product, amount=int(amount))

            show_basket_summary(chat_id)

            show_categories(message)
        else:
            bot.send_message(chat_id, "–ü–æ–º–∏–ª–∫–∞: —Ç–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π.")

    except ValueError:
        bot.send_message(chat_id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å.")
        bot.register_next_step_handler(message, save_to_basket)
    except Exception as e:
        bot.send_message(chat_id, f"–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: {str(e)}")


def show_basket_summary(chat_id):
    try:
        user = UserProfile.objects.get(telegram_id=chat_id)
        basket_items = Basket.objects.filter(user=user)

        if basket_items.exists():
            total_amount = 0
            summary = "‚úÖ –°—Ç—Ä–∞–≤–∞ –¥–æ–¥–∞–Ω–∞ –¥–æ –∫–æ—à–∏–∫–∞\n"

            for item in basket_items:
                product = item.products
                amount = item.amount
                price = product.price * amount
                total_amount += price

            bot.send_message(chat_id, summary)
        else:
            bot.send_message(chat_id, "–í–∞—à –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π.")
    except Exception as e:
        bot.send_message(chat_id, f"–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—ñ –∫–æ—à–∏–∫–∞: {str(e)}")


@bot.message_handler(func=lambda message: message.text == '–ö–æ—Ä–∑–∏–Ω–∞')
def show_basket(message):
    chat_id = message.chat.id
    try:
        user = UserProfile.objects.get(telegram_id=chat_id)
        basket_items = Basket.objects.filter(user=user)

        if not basket_items.exists():
            bot.send_message(chat_id, "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø–æ—Ä–æ–∂–Ω—è ‚ùé")
            return

        total_price = 0
        order_details = "–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:\n\n"

        for item in basket_items:
            item_total = item.products.price * item.amount
            total_price += item_total
            order_details += f"üìå {item.products.name} - {item.products.price}–≥—Ä–Ω x {item.amount} = {item_total}–≥—Ä–Ω\n"

        order_details += f"\nüí∞ –î–æ —Å–ø–ª–∞—Ç–∏ : {total_price}–≥—Ä–Ω"

        markup = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        markup.add(KeyboardButton('–ó–∞–º–æ–≤–∏—Ç–∏ ‚úÖ'), KeyboardButton('–û—á–∏—Å—Ç–∏—Ç–∏ ‚ùå'))
        markup.add(KeyboardButton('üìñ –í—ñ–¥–∫—Ä–∏—Ç–∏ –º–µ–Ω—é üìñ'))

        bot.send_message(chat_id, order_details, reply_markup=markup)

    except UserProfile.DoesNotExist:
        bot.send_message(chat_id, "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø–æ—Ä–æ–∂–Ω—è ‚ùé")


@bot.message_handler(func=lambda message: message.text == '–ó–∞–º–æ–≤–∏—Ç–∏ ‚úÖ')
def ask_for_contact_info(message):
    chat_id = message.chat.id
    try:
        user = UserProfile.objects.get(telegram_id=chat_id)
        basket_items = Basket.objects.filter(user=user)

        if not basket_items.exists():
            bot.send_message(chat_id, "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø–æ—Ä–æ–∂–Ω—è ‚ùé")
            return

        if chat_id not in user_context:
            user_context[chat_id] = {}

        user_context[chat_id]['step'] = 'order_food'

        markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup.add(KeyboardButton('–ü–æ–¥—ñ–ª–∏—Ç–∏—Å—å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º', request_contact=True))
        markup.add(KeyboardButton('–í–≤–µ—Å—Ç–∏ —Å–∞–º–æ—Å—Ç—ñ–π–Ω–æ –∫–æ–Ω—Ç–∞–∫—Ç'))
        bot.send_message(chat_id, "–í–∫–∞–∂—ñ—Ç—å —Å–≤–æ—ó –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ñ –¥–∞–Ω—ñ:", reply_markup=markup)

    except UserProfile.DoesNotExist:
        bot.send_message(chat_id, "–ü–æ–º–∏–ª–∫–∞. –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.")


@bot.message_handler(content_types=['contact'])
def handle_contact_info(message):
    chat_id = message.chat.id

    if chat_id in user_context and user_context[chat_id].get('step') == 'order_food':
        if message.contact:
            contact = message.contact.phone_number
        else:
            contact = message.text

        user_context[chat_id]['contact'] = contact

        process_order(chat_id)

    elif chat_id in user_context and user_context[chat_id].get('step') == 'reserve_hall':
        if message.contact:
            contact = message.contact.phone_number
        else:
            contact = message.text

        user_context[chat_id]['contact'] = contact

        send_order(chat_id, user_context[chat_id].get('hall'), contact)
    else:
        bot.send_message(chat_id, "–ü–æ–º–∏–ª–∫–∞: –Ω–µ–æ—á—ñ–∫—É–≤–∞–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–∏—Ö.")


def process_order(chat_id):
    try:
        user = UserProfile.objects.get(telegram_id=chat_id)
        basket_items = Basket.objects.filter(user=user)

        if not basket_items.exists():
            bot.send_message(chat_id, "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø–æ—Ä–æ–∂–Ω—è ‚ùé")
            return

        contact = user_context[chat_id].get('contact', '–ö–æ–Ω—Ç–∞–∫—Ç –Ω–µ –≤–∫–∞–∑–∞–Ω–∏–π')

        order_details = "‚ùó –ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚ùó\n"
        order_details += f"üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {user.username}\nü§ñ ID: {user.telegram_id}\n"
        order_details += f"üìû –ö–æ–Ω—Ç–∞–∫—Ç: {contact}\n"

        total_price = 0

        for item in basket_items:
            item_total = item.products.price * item.amount
            total_price += item_total
            order_details += f"üìå {item.products.name} - {item.products.price}–≥—Ä–Ω x {item.amount} = {item_total}–≥—Ä–Ω\n"

        order_details += f"\nüí∞ –î–æ —Å–ø–ª–∞—Ç–∏ : {total_price}–≥—Ä–Ω"

        channel_id = -1002297718612
        bot.send_message(channel_id, order_details)

        basket_items.delete()

        bot.send_message(chat_id, "–î—è–∫—É—î–º–æ –∑–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è! –ú–∏ –∑ –≤–∞–º–∏ –∑–≤'—è–∂–µ–º–æ—Å—å –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.")
        clear_user_context(chat_id)
        bot.send_message(chat_id, "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é üëá", reply_markup=create_reply_markup())
    except UserProfile.DoesNotExist:
        bot.send_message(chat_id, "–ü–æ–º–∏–ª–∫–∞. –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.")


@bot.message_handler(func=lambda message: message.text == '–û—á–∏—Å—Ç–∏—Ç–∏ ‚ùå')
def clear_basket(message):
    chat_id = message.chat.id
    try:
        user = UserProfile.objects.get(telegram_id=chat_id)
        basket_items = Basket.objects.filter(user=user)

        if not basket_items.exists():
            bot.send_message(chat_id, "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø–æ—Ä–æ–∂–Ω—è ‚ùé")
            return

        markup = InlineKeyboardMarkup(row_width=1)
        for item in basket_items:
            button = InlineKeyboardButton(text=f"{item.products.name} - –í–∏–¥–∞–ª–∏—Ç–∏", callback_data=f"delete_{item.id}")
            markup.add(button)

        bot.send_message(chat_id, "–û–±–µ—Ä—ñ—Ç—å —Ç–æ–≤–∞—Ä –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è:", reply_markup=markup)

    except UserProfile.DoesNotExist:
        bot.send_message(chat_id, "–ü–æ–º–∏–ª–∫–∞. –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.")


@bot.callback_query_handler(func=lambda call: call.data.startswith('delete_'))
def delete_item_from_basket(call):
    chat_id = call.message.chat.id
    item_id = call.data.split('_')[1]

    try:
        basket_item = Basket.objects.get(id=item_id)
        basket_item.delete()

        bot.answer_callback_query(call.id, text="–¢–æ–≤–∞—Ä —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ.")
        bot.delete_message(chat_id, call.message.message_id)

        remaining_items = Basket.objects.filter(user=basket_item.user)
        if remaining_items.exists():
            update_basket_summary(chat_id)
        else:
            bot.send_message(chat_id, "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø–æ—Ä–æ–∂–Ω—è ‚ùé")

    except Basket.DoesNotExist:
        bot.send_message(chat_id, "–ü–æ–º–∏–ª–∫–∞. –¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")


def update_basket_summary(chat_id):
    try:
        user = UserProfile.objects.get(telegram_id=chat_id)
        basket_items = Basket.objects.filter(user=user)

        if basket_items.exists():
            total_amount = 0
            summary = "–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:\n\n"

            for item in basket_items:
                product = item.products
                amount = item.amount
                price = product.price * amount
                total_amount += price

                summary += f"üìå {product.name} - {product.price}–≥—Ä–Ω x {amount} = {price}–≥—Ä–Ω\n"

            summary += f"\nüí∞ –î–æ —Å–ø–ª–∞—Ç–∏: {total_amount}–≥—Ä–Ω"
            bot.send_message(chat_id, summary)
        else:
            bot.send_message(chat_id, "–í–∞—à –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π ‚ùé")
    except Exception as e:
        bot.send_message(chat_id, f"–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –∫–æ—à–∏–∫–∞: {str(e)}")


@bot.message_handler(func=lambda message: message.text == 'üìñ –í—ñ–¥–∫—Ä–∏—Ç–∏ –º–µ–Ω—é üìñ')
def open_main_menu(message):
    chat_id = message.chat.id
    start(message)


@bot.message_handler(func=lambda message: message.text == '–ü—Ä–æ –Ω–∞—Å')
def about_us(message):
    chat_id = message.chat.id

    try:
        about_info = AboutUs.objects.first()

        if about_info:
            caption = f"‚ÑπÔ∏è –ü—Ä–æ –Ω–∞—Å:\n\n{about_info.text}"

            markup = ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add(KeyboardButton('–ù–∞–∑–∞–¥ ‚¨Ö'))

            if about_info.image_products:
                with open(about_info.image_products.path, 'rb') as image:
                    bot.send_photo(chat_id, image, caption=caption, reply_markup=markup)
            else:
                bot.send_message(chat_id, caption, reply_markup=markup)
        else:
            bot.send_message(chat_id, "–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –Ω–∞—Å –≤—ñ–¥—Å—É—Ç–Ω—è.")
    except Exception as e:
        bot.send_message(chat_id, f"–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó: {str(e)}")


@bot.message_handler(func=lambda message: message.text == '–ö–æ–Ω—Ç–∞–∫—Ç–∏')
def show_contacts(message):
    chat_id = message.chat.id

    try:
        contact_info = Contacts.objects.first()

        if contact_info and contact_info.text:
            markup = ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add(KeyboardButton('–ù–∞–∑–∞–¥ ‚¨Ö'))

            bot.send_message(chat_id, f"üìû –ö–æ–Ω—Ç–∞–∫—Ç–∏:\n\n{contact_info.text}", reply_markup=markup)
        else:
            bot.send_message(chat_id, "–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫–æ–Ω—Ç–∞–∫—Ç–∏ –≤—ñ–¥—Å—É—Ç–Ω—è.")
    except Exception as e:
        bot.send_message(chat_id, f"–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó: {str(e)}")
